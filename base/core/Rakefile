require 'logger'

class MLog
  def info(msg)
    Logger.new(STDOUT).info msg
    Logger.new("./log/#{ENV['RUBY_ENV']}.log", 10, 1024000).info msg
  end
  def warning(msg)
    Logger.new(STDOUT).warning msg
    Logger.new("./log/#{ENV['RUBY_ENV']}.log", 10, 1024000).warning msg
  end
  def error(msg)
    Logger.new(STDOUT).error msg
    Logger.new("./log/#{ENV['RUBY_ENV']}.log", 10, 1024000).error msg
  end
end

@logger = MLog.new

namespace :db do
  desc "Run migrations"
  task :migrate, [:version] do |t, args|
    require "sequel/core"
    Sequel.extension :migration
    version = args[:version].to_i if args[:version]
    @logger.info "Polling DB"
    _done = false
    while _done == false
      begin
        Sequel.connect(:adapter => 'mysql2', :host => ENV.fetch("MYSQL_HOST"), :database => ENV.fetch("MYSQL_DATABASE"), :user => ENV.fetch("MYSQL_USER"), :password => ENV.fetch("MYSQL_PASSWORD")) do |db|
          Sequel::Migrator.run(db, "lib/common/db/migrations", target: version)
        end
      rescue Sequel::DatabaseConnectionError
        @logger.info "Database unavailable, retrying in 5 seconds"
        sleep 5
      else
        @logger.info "Database migrate complete"
        _done = true
      end
    end
  end
  desc "Seed DB"
  task :seed, [:version] do |t, args|
    require "sequel/core"
    Sequel.extension :migration
    version = args[:version].to_i if args[:version]
    @logger.info "Polling DB"
    _done = false
    while _done == false
      begin
        Sequel.connect(:adapter => 'mysql2', :host => ENV.fetch("MYSQL_HOST"), :database => ENV.fetch("MYSQL_DATABASE"), :user => ENV.fetch("MYSQL_USER"), :password => ENV.fetch("MYSQL_PASSWORD")) do |db|
          if File.exist?('./lib/common/db/seed.rb')
            require './lib/common/db/seed.rb'
          end
        end
      rescue Sequel::DatabaseConnectionError
        @logger.info "Database unavailable, retrying"
        sleep 5
      else
        @logger.info "Database migrate complete"
        _done = true
      end
    end
  end
end
